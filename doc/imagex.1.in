.TH IMAGEX 1 "May 2012" "imagex (wimlib @VERSION@)" "User Commands"
.SH NAME
imagex \- Create, modify, extract, mount, or unmount a WIM (Windows Imaging Format) archive
.SH SYNOPSIS
\fBimagex append\fR \fIarguments...\fR
.br
\fBimagex apply\fR \fIarguments...\fR
.br
\fBimagex capture\fR \fIarguments...\fR
.br
\fBimagex delete\fR \fIarguments...\fR
.br
\fBimagex dir\fR \fIarguments...\fR
.br
\fBimagex export\fR \fIarguments...\fR
.br
\fBimagex info\fR \fIarguments...\fR
.br
\fBimagex join\fR \fIarguments...\fR
.br
\fBimagex mount\fR \fIarguments...\fR
.br
\fBimagex mountrw\fR \fIarguments...\fR
.br
\fBimagex split\fR \fIarguments...\fR
.br
\fBimagex unmount\fR \fIarguments...\fR

.SH DESCRIPTION
\fBimagex\fR is able to deal with archives in the Windows Imaging Format (.wim
files). Its interface is meant to be similar to Microsoft's imagex.exe program.

To do its work, \fBimagex\fR uses \fBwimlib\fR, a library which provides
interfaces for manipulating WIM archives.  You could wimlib in your own programs
if you wanted to.  Wimlib's public interface is documented.

See \fBWARNING\fR.

.SH COMMANDS

There is a separate manual page for each \fBimagex\fR command.

.SH SUPPORTED FEATURES

The following features are currently supported:

.IP \[bu] 2
Mount an image in a WIM read-only (\fBimagex mount\fR)
.IP \[bu] 2
Mount an image in a WIM read-write (\fBimagex mountrw\fR)
.IP \[bu] 2
Create a WIM from a directory (\fBimagex capture\fR)
.IP \[bu] 2
Append a directory onto a WIM as a new image (\fBimagex append\fR)
.IP \[bu] 2
Delete image(s) from a WIM (\fBimagex delete\fR)
.IP \[bu] 2
Export image(s) from a WIM (\fBimagex export\fR)
.IP \[bu] 2
Display information about a WIM file (\fBimagex info\fR, \fBimagex dir\fR)
.IP \[bu] 2
Change the name or description of an image in the WIM (\fBimagex info\fR)
.IP \[bu] 2
Change which image in a WIM is bootable (\fBimagex info\fR)
.IP \[bu] 2
Combining split WIMs into one WIM (\fBimage join\fR)
.IP \[bu] 2
Splitting a WIM into multiple parts (\fBimage split\fR)
.IP \[bu] 2
Support for all WIM compression types, both compression and decompression (LZX,
XPRESS, and none)
.IP \[bu] 2
Integrity table
.IP \[bu] 2
XML data (parsed and written using \fBlibxml\fR(3))

.SH UNSUPPORTED FEATURES
The following features are currently unsupported:
.IP \[bu] 2
Wimlib cannot add security data when it captures a WIM file, although it will
preserve security data for existing WIM files.  New files added to a mounted
WIM will be added without security data.  This does not seem to matter for
Windows PE, but this means that you should not use this program to image a drive
containing Windows Vista/7/8 and expect it to be applied with the correct file
permissions.
.IP \[bu] 2
Alternate file streams are unsupported and will be lost when wimlib writes a WIM
file.  Note that you shouldn't really have these on your Windows system anyway
because they are unneeded and a security risk.
.IP \[bu] 2
Directly applying or mounting split WIMs is unsupported.  You have to combine
them together with \fBimagex join\fR first.
.IP \[bu] 2
The \fB--verify\fR option, for all commands that use it is unsupported.  Without
this option, there theoretically could be a SHA1 hash collision between two
files, although it's very unlikely.  You can still verify a WIM manually by
capturing it, then applying it to a different location, then running a recursive
diff on the two directory trees.
.IP \[bu] 2
The \fB--config\fR option, for all commands that use it.
.IP \[bu] 2
Different versions of the WIM file format (if different versions even exist).

Also see the Doxygen documentation for Wimlib.

.SH DIFFERENCES FROM MICROSOFT IMAGEX

See \fBUNSUPPORTED FEATURES\fR.

The most important difference is that this version of \fBimagex\fR cannot
capture and restore Windows images losslessly because file permissions and
alternate file streams cannot be captured.  This is because Microsoft designed
the WIM format to be specific to their NTFS filesystem and the Windows security
model/API, which is difficult to support in a non-Windows program.  However, you
can still create images of Windows PE, even from a directory tree on a non-NTFS
filesystem.

See the documentation for each subcommand of \fBimagex\fR; in some cases they do
not do exactly the same thing as imagex.exe.

Some features, such as the ability to keep files hard-linked when they are
extracted from a WIM, are not available in Microsoft's version of imagex.
Also, doesn't seem to be an equivalent of \fBimagex join\fR in Microsoft's
version; you would have to use \fBimagex.exe /export\fR, but that doesn't let
you export all images at once.

Microsoft's version has some weird limitations, like it won't let you extract a
WIM on a shared folder, and it requires some commands to be run only from
Windows PE and not from regular Windows.  This version does not have these
unusual limitations, although it won't actually run on Windows anyway.

The \fB/scroll\fR and \fB/log\fR switches from Microsoft's version of imagex
will not be implemented.  Note that to scroll the output in the UNIX shell you
can just pipe the output into \fBless\fR(1).

Obviously, this version of imagex is free software but Microsoft's version is
not.

.SH WARNING

Note: \fBwimlib\fR and \fBimagex\fR are experimental.  Use Microsoft's
imagex.exe if you have to make sure your WIM files are made "correctly".  Not
all features listed under \fBSUPPORTED FEATURES\fR have been thoroughly tested.
Feel free to submit a bug report if you find a bug.

Some parts of the WIM file format are poorly documented or even completely
undocumented, so I've just had to do the best I can to read and write WIMs in a
way that appears to be compatible with Microsoft's software.

.SH REPORTING BUGS

Report bugs to ebiggers3@gmail.com.

.SH SEE ALSO
.BR imagex-append (1),
.BR imagex-apply (1),
.BR imagex-capture (1),
.BR imagex-delete (1),
.BR imagex-dir (1),
.BR imagex-export (1),
.BR imagex-info (1),
.BR imagex-join (1),
.BR imagex-mount (1),
.BR imagex-mountrw (1),
.BR imagex-split (1),
.BR imagex-unmount (1),

