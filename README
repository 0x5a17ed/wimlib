				   WIMLIB                                    

This is wimlib version 0.7.2 (May 2012).  wimlib can be used to read, write,
and mount files in the Windows Imaging Format (WIM files).  These files are
normally created by using the `imagex.exe' utility on Windows, but this library
provides a free implementetion of imagex for UNIX-based systems.

The main use of this library is to create customized images of Windows PE, the
Windows Preinstallation Environment, without having to rely on Windows.  Windows
PE is a lightweight version of Windows that can run entirely from memory and can
be used to install Windows from local media or a network drive or perform
maintenance.  Windows PE is the operating system that runs when you boot from
the Windows DVD.

You can find Windows PE on the ISO filesystem on the installation DVD for both
Windows 7 and Windows 8.  I don't have a DVD for Vista but it should be on there
too.  The Windows PE image is a WIM file, `sources/boot.wim', on the ISO
filesystem.  Windows PE can also be found in the Windows Automated Installation
Kit (WAIK), which is free to download from Microsoft, inside the `WinPE.cab'
file, which you can extract if you install either the `cabextract' or `p7zip'
programs.

wimlib provides a public API for other programs to use, but also comes with two
programs: `imagex' and `mkwinpeimg'.  

`imagex' is intended to be like the imagex.exe program from Windows.  `imagex'
can be used to create, extract, and mount WIM files.  Both read-only and
read-write mounts are supported.  See the man page `doc/imagex.1' for more
details.

`mkwinpeimg' is shell script that makes it easy to create a customized bootable
image of Windows PE that can be put on a CD or USB drive, or published on a
server for PXE booting.  See the main page `doc/mkwinpeiso.1' for more details.

wimlib can also be used to handle larger WIM files such as the `install.wim'
file that comes on the Windows DVD.  You may not, however, losslessly capture
and apply Windows installations using wimlib because of issues with NTFS and
Windows-specific information.

An earlier version of Wimlib is being used to deploy Windows 7 from the Ultimate
Deployment Appliance.  For more information see
http://www.ultimatedeployment.org/.  

				 CONFIGURATION

Besides the various well-known options, the following options can be passed to
wimlib's `configure' script:

--without-fuse
	If libfuse or the FUSE kernel module is not available, wimlib can be
	compiled with --without-fuse.  This will remove the ability to mount and
	unmount WIM files.  wimlib_mount() and wimlib_unmount() will fail with
	WIMLIB_ERR_UNSUPPORTED.

--without-libcrypto
	Build in functions for SHA1 rather than using external SHA1 functions
	from libcrypto (part of OpenSSL).  The default is to use libcrypto if it
	is found on the system.

--enable-ssse3-sha1
	Use a very fast assembly language implementation of SHA1 from Intel.
	Only use this if the build target supports the SSSE3 instructions.

--disable-custom-memory-allocator
	If this option is given, MALLOC(), FREE(), CALLOC(), and STRDUP() will
	directly call the appropriate functions in the C library.
	wimlib_set_memory_allocator() will fail with WIMLIB_ERR_UNSUPPORTED.

--disable-verify-compression
	Unless this option is given, every time wimlib compresses a data block
	it will decompress it into a temporary buffer and abort() the program
	with an error message if the decompressed data does not exactly match
	the original data.  This is to find bugs.

--disable-security-data
	Wimlib cannot create or modify WIM security data, but by default it will
	copy existing security data when modifying a WIM or exporting an image.
	Passing this flag will disable this support; then wimlib will always
	write WIMs without security data.

--disable-error-messages
	Removes all error messages from the library.  If left in, they still
	have to explicitly turned on with wimlib_set_print_errors() in order to
	see them.  Also, error codes will still be returned regardless of
	whether error messages are printed or not.  

	If --disable-error-messages is given, wimlib_set_print_errors() will
	fail with WIMLIB_ERR_UNSUPPORTED if the action is to turn error messages
	on.

--disable-assertions
	Remove all assertions.  Without this option, wimlib will abort() the
	program if an assertion fails.  An assertion failure should only occur
	if there is a bug in wimlib.

--enable-debug
	Include debugging messages.  Only use this option if you have found a
	bug in the library.

--enable-more-debug
	Include more debugging messages.  Only use this option if you have found
	a bug in the library.

				  DEPENDENCIES

Wimlib requires libxml2 to build.  This is a commonly used free library to read
and write XML files.  You likely already have it installed as a dependency for
some other program.  For more information see http://xmlsoft.org/.

Wimlib also requires libfuse to build (unless configured with --without-fuse;
see above).  Most GNU/Linux distributions already include this, but make sure
you have the libfuse package installed (libfuse-dev if your distribution
distributes header files separately).  FUSE also requires a kernel module.  If
the kernel module is available it will automatically be loaded if you try to
mount a WIM file.  For more information see http://fuse.sourceforge.net/.  FUSE
is also available for FreeBSD.

The `mkwinpeimg' shell script will look for several other programs depending on
what options are given to it.  Depending on your GNU/Linux distribution, you may
already have these programs installed, or they may be in the software
repository.  Making an ISO filesystem requires `mkisofs' from `cdrkit'
(http://www.cdrkit.org).  Making a disk image requires `mtools'
(http://www.gnu.org/software/mtools) and `syslinux' (http://www.syslinux.org).
Retrieving files from the Windows Automated Installation Kit requires
`cabextract' (http://www.cabextract.org.uk).

				  PORTABILITY

wimlib has mostly been developed and tested on x86_64 (64-bit) GNU/Linux.

It has been tested on x86 (32-bit) GNU/Linux occasionally.

It can also be compiled and run on FreeBSD.

wimlib should work on big endian machines but it has not been tested.

There are no plans to port wimlib to Windows since the programming interface on
Windows is very different and Microsoft's imagex.exe is already available.

				   REFERENCES 

The WIM file format is specified in a document that can be found in the
Microsoft Download Center.  There is a similar document that specifies the LZX
compression format, and a document that specifies the XPRESS compression format.
However, some aspects of these formats are poorly documented.  Some particularly
poorly documented parts of the formats have had comments added in various places
in the library.

lzx-decomp.c, the code to decompress WIM file resources that are compressed
using LZX compression, is originally based on code from the cabextract project
(http://www.cabextract.org.uk).  

lzx-comp.c, the code to compress WIM file resources using LZX compression, is
originally based on code written by Matthew Russotto (www.russotto.net/chm/).

lz.c, the code to find LZ77 matches (used for both XPRESS and LZX compression),
is based on code from zlib.

A very limited number of other free programs can handle some parts of the WIM
file format.  7-zip is able to extract and create WIMs (as well as files in many
other archive formats).  However, wimlib is designed specifically to handle WIM
files and provides features previously only available in Microsoft's imagex.exe,
such as the ability to mount WIMs read-write as well as read-only, and the
ability to create LZX or XPRESS compressed WIMs.

				MORE INFORMATION

See the manual pages for `imagex', the manual pages for the subcommands of
`imagex', and the manual page for `mkwinpeimg'.

As of version 0.5.0, Wimlib's public API is documented.  Doxygen is required to
build the documentation.  To build the documentation, run `configure', then
enter the directory `doc' and run `doxygen'.  The HTML documentation will be
created in a directory named `html'.

				    LICENSE

Wimlib is released under the GNU LGPL version 2.1 or later.  The files in the
`programs' directory are released under the GPL version 3.

				   DISCLAIMER 

Wimlib is experimental.  Use Microsoft's `imagex.exe' if you want to make sure
your WIM files are made correctly.  Please submit a bug report (to
ebiggers3@gmail.com) if you find a bug.

Some parts of the WIM file format are poorly documented or even completely
undocumented, so I've just had to do the best I can to read and write WIMs that
appear to be compatible with Microsoft's software.
